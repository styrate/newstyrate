/*
 * Code generated by Backengine
 *
 * https://backengine.dev
 */

import { useState, useEffect } from "react";
import { supabase } from "../supabase";
import { Database } from "../types";

type Table = Database["public"]["Tables"]["entries"];
export type Row = Table["Row"];
export type InsertEntry = Table["Insert"];
export type UpdateEntry = Table["Update"];

const useEntries = () => {
  const [entries, setEntries] = useState<Row[]>([]);

  useEffect(() => {
    fetchEntries();
  }, []);

  const fetchEntries = async () => {
    try {
      const { data, error } = await supabase.from("entries").select();
      if (error) {
        throw error;
      }
      setEntries(data || []);
    } catch (error) {
      console.error("Error fetching", error);
    }
  };

  const createEntry = async (newData: InsertEntry) => {
    const { data, error } = await supabase
      .from("entries")
      .insert([newData])
      .select();
    if (error) {
      throw error;
    }
    setEntries([...entries, data[0]]);
    return data[0];
  };

  const updateEntry = async (id: Row["id"], updatedData: UpdateEntry) => {
    const { data, error } = await supabase
      .from("entries")
      .update(updatedData)
      .eq("id", id)
      .select();
    if (error) {
      throw error;
    }
    setEntries(
      entries.map((entry) =>
        entry.id === id ? { ...entry, ...data[0] } : entry,
      ),
    );
    return data[0];
  };

  const deleteEntry = async (id: Row["id"]): Promise<number | null> => {
    const { error, count } = await supabase
      .from("entries")
      .delete({ count: "exact" })
      .eq("id", id);
    if (error) {
      throw error;
    }
    const filtered = entries.filter((entry) => entry.id !== id);
    setEntries(filtered);
    return count;
  };

  return { entries, fetchEntries, createEntry, updateEntry, deleteEntry };
};

export default useEntries;
