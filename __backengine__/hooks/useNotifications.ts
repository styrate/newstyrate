/*
 * Code generated by Backengine
 *
 * https://backengine.dev
 */

import { useState, useEffect } from "react";
import { supabase } from "../supabase";
import { Database } from "../types";

type Table = Database["public"]["Tables"]["notifications"];
export type Row = Table["Row"];
export type InsertNotification = Table["Insert"];
export type UpdateNotification = Table["Update"];

const useNotifications = () => {
  const [notifications, setNotifications] = useState<Row[]>([]);

  useEffect(() => {
    fetchNotifications();
  }, []);

  const fetchNotifications = async () => {
    try {
      const { data, error } = await supabase.from("notifications").select();
      if (error) {
        throw error;
      }
      setNotifications(data || []);
    } catch (error) {
      console.error("Error fetching", error);
    }
  };

  const createNotification = async (newData: InsertNotification) => {
    const { data, error } = await supabase
      .from("notifications")
      .insert([newData])
      .select();
    if (error) {
      throw error;
    }
    setNotifications([...notifications, data[0]]);
    return data[0];
  };

  const updateNotification = async (
    id: Row["id"],
    updatedData: UpdateNotification,
  ) => {
    const { data, error } = await supabase
      .from("notifications")
      .update(updatedData)
      .eq("id", id)
      .select();
    if (error) {
      throw error;
    }
    setNotifications(
      notifications.map((notification) =>
        notification.id === id ? { ...notification, ...data[0] } : notification,
      ),
    );
    return data[0];
  };

  const deleteNotification = async (id: Row["id"]): Promise<number | null> => {
    const { error, count } = await supabase
      .from("notifications")
      .delete({ count: "exact" })
      .eq("id", id);
    if (error) {
      throw error;
    }
    const filtered = notifications.filter(
      (notification) => notification.id !== id,
    );
    setNotifications(filtered);
    return count;
  };

  return {
    notifications,
    fetchNotifications,
    createNotification,
    updateNotification,
    deleteNotification,
  };
};

export default useNotifications;
