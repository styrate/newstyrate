/*
 * Code generated by Backengine
 *
 * https://backengine.dev
 */

import { useState, useEffect } from "react";
import { supabase } from "../supabase";
import { Database } from "../types";

type Table = Database["public"]["Tables"]["votes"];
export type Row = Table["Row"];
export type InsertVote = Table["Insert"];
export type UpdateVote = Table["Update"];

const useVotes = () => {
  const [votes, setVotes] = useState<Row[]>([]);

  useEffect(() => {
    fetchVotes();
  }, []);

  const fetchVotes = async () => {
    try {
      const { data, error } = await supabase.from("votes").select();
      if (error) {
        throw error;
      }
      setVotes(data || []);
    } catch (error) {
      console.error("Error fetching", error);
    }
  };

  const createVote = async (newData: InsertVote) => {
    const { data, error } = await supabase
      .from("votes")
      .insert([newData])
      .select();
    if (error) {
      throw error;
    }
    setVotes([...votes, data[0]]);
    return data[0];
  };

  const updateVote = async (id: Row["id"], updatedData: UpdateVote) => {
    const { data, error } = await supabase
      .from("votes")
      .update(updatedData)
      .eq("id", id)
      .select();
    if (error) {
      throw error;
    }
    setVotes(
      votes.map((vote) => (vote.id === id ? { ...vote, ...data[0] } : vote)),
    );
    return data[0];
  };

  const deleteVote = async (id: Row["id"]): Promise<number | null> => {
    const { error, count } = await supabase
      .from("votes")
      .delete({ count: "exact" })
      .eq("id", id);
    if (error) {
      throw error;
    }
    const filtered = votes.filter((vote) => vote.id !== id);
    setVotes(filtered);
    return count;
  };

  return { votes, fetchVotes, createVote, updateVote, deleteVote };
};

export default useVotes;
