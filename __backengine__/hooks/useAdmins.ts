/*
 * Code generated by Backengine
 *
 * https://backengine.dev
 */

import { useState, useEffect } from "react";
import { supabase } from "../supabase";
import { Database } from "../types";

type Table = Database["public"]["Tables"]["admins"];
export type Row = Table["Row"];
export type InsertAdmin = Table["Insert"];
export type UpdateAdmin = Table["Update"];

const useAdmins = () => {
  const [admins, setAdmins] = useState<Row[]>([]);

  useEffect(() => {
    fetchAdmins();
  }, []);

  const fetchAdmins = async () => {
    try {
      const { data, error } = await supabase.from("admins").select();
      if (error) {
        throw error;
      }
      setAdmins(data || []);
    } catch (error) {
      console.error("Error fetching", error);
    }
  };

  const createAdmin = async (newData: InsertAdmin) => {
    const { data, error } = await supabase
      .from("admins")
      .insert([newData])
      .select();
    if (error) {
      throw error;
    }
    setAdmins([...admins, data[0]]);
    return data[0];
  };

  const updateAdmin = async (id: Row["id"], updatedData: UpdateAdmin) => {
    const { data, error } = await supabase
      .from("admins")
      .update(updatedData)
      .eq("id", id)
      .select();
    if (error) {
      throw error;
    }
    setAdmins(
      admins.map((admin) =>
        admin.id === id ? { ...admin, ...data[0] } : admin,
      ),
    );
    return data[0];
  };

  const deleteAdmin = async (id: Row["id"]): Promise<number | null> => {
    const { error, count } = await supabase
      .from("admins")
      .delete({ count: "exact" })
      .eq("id", id);
    if (error) {
      throw error;
    }
    const filtered = admins.filter((admin) => admin.id !== id);
    setAdmins(filtered);
    return count;
  };

  return { admins, fetchAdmins, createAdmin, updateAdmin, deleteAdmin };
};

export default useAdmins;
