/*
 * Code generated by Backengine
 *
 * https://backengine.dev
 */

import { useState, useEffect } from "react";
import { supabase } from "../supabase";
import { Database } from "../types";

type Table = Database["public"]["Tables"]["contests"];
export type Row = Table["Row"];
export type InsertContest = Table["Insert"];
export type UpdateContest = Table["Update"];

const useContests = () => {
  const [contests, setContests] = useState<Row[]>([]);

  useEffect(() => {
    fetchContests();
  }, []);

  const fetchContests = async () => {
    try {
      const { data, error } = await supabase.from("contests").select();
      if (error) {
        throw error;
      }
      setContests(data || []);
    } catch (error) {
      console.error("Error fetching", error);
    }
  };

  const createContest = async (newData: InsertContest) => {
    const { data, error } = await supabase
      .from("contests")
      .insert([newData])
      .select();
    if (error) {
      throw error;
    }
    setContests([...contests, data[0]]);
    return data[0];
  };

  const updateContest = async (id: Row["id"], updatedData: UpdateContest) => {
    const { data, error } = await supabase
      .from("contests")
      .update(updatedData)
      .eq("id", id)
      .select();
    if (error) {
      throw error;
    }
    setContests(
      contests.map((contest) =>
        contest.id === id ? { ...contest, ...data[0] } : contest,
      ),
    );
    return data[0];
  };

  const deleteContest = async (id: Row["id"]): Promise<number | null> => {
    const { error, count } = await supabase
      .from("contests")
      .delete({ count: "exact" })
      .eq("id", id);
    if (error) {
      throw error;
    }
    const filtered = contests.filter((contest) => contest.id !== id);
    setContests(filtered);
    return count;
  };

  return {
    contests,
    fetchContests,
    createContest,
    updateContest,
    deleteContest,
  };
};

export default useContests;
