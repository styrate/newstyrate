/*
 * Code generated by Backengine
 *
 * https://backengine.dev
 */

import { useState, useEffect } from "react";
import { supabase } from "../supabase";
import { Database } from "../types";

type Table = Database["public"]["Tables"]["users"];
export type Row = Table["Row"];
export type InsertUser = Table["Insert"];
export type UpdateUser = Table["Update"];

const useUsers = () => {
  const [users, setUsers] = useState<Row[]>([]);

  useEffect(() => {
    fetchUsers();
  }, []);

  const fetchUsers = async () => {
    try {
      const { data, error } = await supabase.from("users").select();
      if (error) {
        throw error;
      }
      setUsers(data || []);
    } catch (error) {
      console.error("Error fetching", error);
    }
  };

  const createUser = async (newData: InsertUser) => {
    const { data, error } = await supabase
      .from("users")
      .insert([newData])
      .select();
    if (error) {
      throw error;
    }
    setUsers([...users, data[0]]);
    return data[0];
  };

  const updateUser = async (id: Row["id"], updatedData: UpdateUser) => {
    const { data, error } = await supabase
      .from("users")
      .update(updatedData)
      .eq("id", id)
      .select();
    if (error) {
      throw error;
    }
    setUsers(
      users.map((user) => (user.id === id ? { ...user, ...data[0] } : user)),
    );
    return data[0];
  };

  const deleteUser = async (id: Row["id"]): Promise<number | null> => {
    const { error, count } = await supabase
      .from("users")
      .delete({ count: "exact" })
      .eq("id", id);
    if (error) {
      throw error;
    }
    const filtered = users.filter((user) => user.id !== id);
    setUsers(filtered);
    return count;
  };

  return { users, fetchUsers, createUser, updateUser, deleteUser };
};

export default useUsers;
